apply plugin: 'com.android.library'

ext {
    bintrayRepo = 'maven'
    bintrayName = 'swipe-selector'

    publishedGroupId = 'com.roughike'
    libraryName = 'swipe-selector'
    artifact = 'swipe-selector'

    libraryDescription = 'A nicer-looking and more intuitive alternative for radio buttons and dropdowns for Android.'

    siteUrl = 'https://github.com/roughike/SwipeSelector'
    gitUrl = 'https://github.com/roughike/SwipeSelector.git'

    libraryVersion = '2.0.0'

    developerId = 'roughike'
    developerName = 'Iiro Krankka'
    developerEmail = 'iiro.krankka@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

android {
    compileSdkVersion 31

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

configurations {
    lintChecks
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.4.1'

    testImplementation deps.junit
    androidTestImplementation deps.junit
    androidTestImplementation deps.androidTestRunner
    androidTestImplementation deps.androidTestRules
}

group = publishedGroupId                               // Maven Group ID for the artifact



version = libraryVersion

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
